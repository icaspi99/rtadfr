if (test == "adf") {
list(testStat = testStat, criticalValues = cvs)
} else {
list(testStat = testStat, testSeq = testSeq, criticalValues = cvs)
}
}
rtadf(x, 50, test = "sadf", nrep = 100)
rtadf <- function(y, r0, test = c("adf", "sadf", "gsadf"),
type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC"),
nrep = 1000) {
if (test == "adf") {
testStat <- ur.adf(y, type, lags, selectlags)
} else if (test == "sadf") {
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.sadf(y, r0, type, lags, selectlags)$sequence)
} else if (test == "gsadf") {
testStat <- ur.gsadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.gsadf(y, r0, type, lags, selectlags)$sequence)
}
t <- length(y)
cvs <- cvSim(t, nrep, test)
if (test == "adf") {
list(testStat = testStat, criticalValues = cvs)
} else {
list(testStat = testStat, testSeq = testSeq, criticalValues = cvs)
}
}
rtadf(x, 50, test = "sadf", nrep = 100)
a <- rtadf(x, 50, test = "sadf", nrep = 100)
length(a$testSeq)
t
a <- rtadf(x, 50, test = "sadf", nrep = 100)
a
rtadf <- function(y, r0, test = c("adf", "sadf", "gsadf"),
type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC"),
nrep = 1000) {
if (test == "adf") {
testStat <- ur.adf(y, type, lags, selectlags)
} else if (test == "sadf") {
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.sadf(y, r0, type, lags, selectlags)$sequence)
} else if (test == "gsadf") {
testStat <- ur.gsadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.gsadf(y, r0, type, lags, selectlags)$sequence)
}
t <- length(y)
cvs <- cvSim(t, nrep, test)
if (test == "adf") {
list(testStat = testStat, criticalValues = cvs)
} else {
list(testStat = testStat, testSeq = testSeq,
criticalValues = cvs$testCVs, dateStampSeq = cvs$datestampCVs)
}
}
a <- rtadf(x, 50, test = "sadf", nrep = 100)
cvs <- cvSim(100, 1000, "sadf")
cvSim <- function(t, r0, nrep, testType) {
statistics   <- rep(NA, nrep) #holds the simulated test statistics
datestampSeq <- matrix(NA, nrow = t - r0 + 1,
ncol = nrep) #holds simulated datestamping sequences
start.time <- Sys.time()
for (i in 1:nrep) {
runResults       <- teststat(t, r0, testType)
if (testType == "adf") {
statistics[i]    <- runResults
} else {
statistics[i]    <- runResults$stat
datestampSeq[,i] <- runResults$sequence
}
}
end.time <- Sys.time()
time.taken <- end.time - start.time
# Calculate quantiles -----------------------------------------------------
if (testType == "adf") {
testCVs <- quantile(statistics, probs = c(0.90, 0.95, 0.99))
#generate a list with critical values
simResults <- list("testCVs" = testCVs)
names(simResults) <- c("testCVs")
print(simResults$testCVs)
} else {
testCVs <- quantile(statistics, probs = c(0.90, 0.95, 0.99))
datestampCVs    <- rowQuantiles(datestampSeq, probs = c(0.90, 0.95, 0.99))
#generate a list with critical values
simResults <- list("testCVs" = testCVs, "datestampCVs" = datestampCVs)
names(simResults) <- c("testCVs", "datestampCVs")
simResults
}
}
cvs <- cvSim(100, 100, "sadf")
cvs <- cvSim(100, 50, 100, "sadf")
cvs$datestampCVs
cvs$datestampCVs[3]
cvs$datestampCVs[,3]
cvs$datestampCVs
cvs$datestampCVs[,"95%]
cvs$datestampCVs[,"95%"]
rtadf <- function(y, r0, test = c("adf", "sadf", "gsadf"),
type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC"),
nrep = 1000) {
if (test == "adf") {
testStat <- ur.adf(y, type, lags, selectlags)
} else if (test == "sadf") {
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.sadf(y, r0, type, lags, selectlags)$sequence)
} else if (test == "gsadf") {
testStat <- ur.gsadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.gsadf(y, r0, type, lags, selectlags)$sequence)
}
t <- length(y)
cvs <- cvSim(t, r0, nrep, test)
if (test == "adf") {
list(testStat = testStat, criticalValues = cvs)
} else {
list(testStat = testStat, testSeq = testSeq,
criticalValues = cvs$testCVs, dateStampSeq = cvs$datestampCVs[,"95%"])
}
}
cvs <- cvSim(100, 50, 100, "sadf")
cvs$datestampCVs
rtadf <- function(y, r0, test = c("adf", "sadf", "gsadf"),
type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC"),
nrep = 1000) {
if (test == "adf") {
testStat <- ur.adf(y, type, lags, selectlags)
} else if (test == "sadf") {
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.sadf(y, r0, type, lags, selectlags)$sequence)
} else if (test == "gsadf") {
testStat <- ur.gsadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.gsadf(y, r0, type, lags, selectlags)$sequence)
}
t <- length(y)
cvs <- cvSim(t, r0, nrep, test)
if (test == "adf") {
list(testStat = testStat, criticalValues = cvs)
} else {
list(testStat = testStat, testSeq = testSeq,
criticalValues = cvs$testCVs, dateStampSeq = cvs$datestampCVs[,"95%"])
}
}
cvs <- cvSim(100, 50, 100, "sadf")
a <- rtadf(x, 50, test = "sadf", nrep = 100)
rtadf <- function(y, r0, test = c("adf", "sadf", "gsadf"),
type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC"),
nrep = 1000) {
if (test == "adf") {
testStat <- ur.adf(y, type, lags, selectlags)
} else if (test == "sadf") {
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.sadf(y, r0, type, lags, selectlags)$sequence)
} else if (test == "gsadf") {
testStat <- ur.gsadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.gsadf(y, r0, type, lags, selectlags)$sequence)
}
t <- length(y)
cvs <- cvSim(t, r0, nrep, test)
if (test == "adf") {
list(testStat = testStat, criticalValues = cvs)
} else {
list(testStat = testStat, testSeq = testSeq,
criticalValues = cvs$testCVs,
dateStampSeq =  c(rep(NA, r0 - 1),cvs$datestampCVs[,"95%"]))
}
}
a <- rtadf(x, 50, test = "sadf", nrep = 100)
?ur.df
library(rtadfr)
?rtadf
devtools::document()
library(devtools)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::document()
library(rtadfr)
?rtadf
devtools::document()
devtools::document()
devtools::document()
library(rtadfr)
devtools::document()
?ראשגכ
?rtadf
snp <- c(100, 101.3514, 103.8288, 106.7568, 109.4595, 108.5586, 106.5315, 107.8829, 109.009, 103.3784, 104.5045, 106.7568, 108.0876, 107.1488, 109.3093, 110.9891, 109.6253, 107.2876, 105.4178, 102.9421, 99.9534, 99.22811, 97.69628, 98.96396, 98.92041, 98.87757, 97.31195, 95.20488, 94.63063, 92.57829, 91.66489, 90.94876, 83.34381, 75.4955, 72.23712, 78.43298, 82.69178, 85.17609, 83.93393, 81.62708, 79.49768, 79.14278, 79.14278, 79.32023, 80.56238, 80.38493, 81.09473, 80.56238, 81.17736, 81.62162, 83.34381, 85.09291, 82.44307, 81.42428, 82.26306, 83.30427, 83.21981, 82.55797, 84.59534, 85.3003, 87.05706, 88.22823, 88.03303, 84.71471, 81.59159, 81.00601, 80.03003, 76.71171, 72.02703, 71.63664, 70.27027, 69.87988, 71.48655, 69.43045, 68.12133, 65.38631, 67.72705, 65.25097, 70.77688, 78.78412, 87.23206, 93.05273, 95.83379, 100.166, 100.5895, 98.89337, 101.1892, 104.4456, 105.2667, 107.9377, 110.6318, 110.2166, 112.9458, 112.154, 112.3884, 112.2372, 115.3768, 118.5228, 115.5345, 118.2463, 122.5283, 122.0484, 123.4098, 123.2971, 126.7267, 139.3259, 145.5843, 144.0541, 145.9679, 145.0021, 144.3537, 137.8788, 124.1441, 121.9546, 124.8419, 126.6329, 123.8095, 124.8468, 128.8288, 131.5315, 136.784, 133.8172, 132.8747, 130.0837, 133.5546, 132.8674, 126.0498, 121.021, 119.997, 116.1726, 115.0722, 109.9803, 108.3333, 105.9544, 105.7714, 105.7714, 104.4904, 103.9414, 109.7973, 113.0912, 114.1892, 111.0783, 106.3204, 106.8694, 106.0552, 103.3922, 104.4067, 106.3219, 104.2205, 104.8649, 102.9897, 98.0457, 98.87903, 95.96255, 97.12325, 94.75839, 92.39517, 95.35707, 95.4955, 91.65057, 84.64324, 81.61599, 82.05189, 87.64369, 85.32819, 82.98755, 81.72272, 81.98198, 81.62008, 85.78642, 87.68769, 89.25738, 90.09009, 91.56429, 97.01752, 104.7515, 105.7465, 114.4649, 124.836, 126.8769, 127.782, 131.1197, 129.3272, 128.5126, 126.8727, 133.6663, 136.7136, 138.7117, 143.4034, 148.1665, 152.9337, 150.1229, 146.857, 144.1842, 145.9459, 147.6694, 148.6002, 142.7832, 137.8284, 132.9767, 129.9155, 124.2876, 125.3981, 123.4414, 125.2299, 125.33, 121.4194, 122.7491, 125.2577, 122.241, 126.3076, 129.8827, 134.0617, 134.2856, 132.4328, 130.8656, 133.8773, 135.9441, 133.5907, 133.8039, 137.9679, 140.8008, 138.4301, 140.8238, 144.7515, 142.6325, 141.8878, 141.6052, 143.2023, 141.6052, 140.5405, 143.4685, 149.5905, 148.5258, 147.4611, 144.0008, 141.6052, 135.217, 125.3686, 122.4406, 128.8288, 130.4259, 128.0303, 132.2891, 131.7568, 129.095, 126.9656, 131.2244, 141.8714, 141.8714, 139.742, 144.0008, 145.538, 144.7574, 145.2252, 143.8779, 142.8695, 141.0497, 140.0149, 141.0626, 136.5536, 138.2942, 136.8742, 134.4407, 136.4259, 133.4951, 128.2251, 127.8035, 116.062, 110.1857, 99.5829, 96.84593, 103.3943, 106.1271, 107.3887, 103.2973, 102.5428, 105.4198, 110.0413, 113.0598, 110.4405, 110.4975, 109.7812, 115.6486, 119.2465, 117.2793, 119.1487, 119.9056, 119.4786, 118.7036, 119.688, 125.8735, 133.8398, 137.6126, 139.383, 142.6007, 144.7447, 143.8971, 140.2106, 133.1437, 132.1591, 138.3885, 136.7928, 138.6335, 138.6747, 136.7421, 128.4346, 121.7175, 128.6684, 132.1354, 141.862, 137.2873, 137.2873, 135.986, 136.3113, 132.0821, 132.7327, 138.9139, 145.0951, 154.5295, 162.012, 156.8068, 151.2763, 154.5295, 157.2734, 155.5811, 147.1877, 143.3383, 151.4499, 155.9507, 155.1787, 159.6501, 157.958, 153.318, 157.1011, 165.4279, 177.3088, 183.1951, 185.074, 186.65, 178.0845, 173.3905, 178.6918, 182.4466, 179.7677, 178.2339, 180.8261, 167.8679, 164.2332, 161.6216, 157.6673, 154.6922, 142.9065, 134.5699, 130.725, 128.8288, 122.3927, 123.4866, 129.7297, 134.0991, 137.2254, 139.9768, 144.1885, 155.4179, 146.8238, 160.5638, 148.9796, 150.2748, 148.7201, 146.2577, 148.6501, 145.4814, 148.2218, 149.0813, 148.8931, 153.5962, 152.8086, 151.5315, 154.5745, 158.2712, 158.2422, 152.8623, 146.5743, 142.8474, 149.3535, 147.758, 141.2397, 134.7873, 131.5534, 123.6619, 117.3913, 113.0915, 109.8185, 105.7331, 105.5836, 109.9228, 112.827, 110.8741, 111.6057, 115.4823, 114.2006, 115.5201, 121.5265, 126.9705, 133.9527, 143.2993, 152.7046, 155.8413, 158.373, 164.4798, 168.2397, 165.3027, 156.3769, 157.3761, 161.4593, 166.6374, 166.3063, 167.7711, 166.0616, 169.2875, 172.1182, 167.9467, 161.0992, 156.2998, 149.6569, 149.204, 143.08, 151.2543, 153.5536, 146.7357, 147.5105, 144.0541, 138.8098, 133.3298, 119.2595, 118.874, 113.8287, 109.3093, 112.6073, 103.3386, 101.4561, 89.73663, 83.80833, 87.43857, 91.85393, 89.19605, 93.55751, 99.35879, 105.552, 106.5208, 111.2992, 117.0321, 116.6886, 119.0753, 128.2103, 132.1959, 131.5498, 126.7065, 127.4006, 132.0508, 135.3297, 136.6366, 137.5082, 139.7061, 138.7702, 138.2539, 136.507, 137.0803, 133.3944, 127.9077, 130.3337, 126.4865, 123.7171, 117.1171, 110.5893, 112.6616, 112.8123, 117.369, 116.6161, 112.7564, 115.4974, 117.4909, 116.1204, 115.622, 118.1139, 120.4811, 119.9827, 114.2515, 108.0219, 108.6448, 113.0056, 113.5039, 113.4354, 112.2259, 115.2581, 118.6513, 118.3026, 118.1034, 118.0279, 120.5075, 120.9188, 120.4717, 118.9012, 114.4332, 113.4572, 109.4313, 107.3574, 107.2354, 104.3074, 99.06156, 100.4035, 103.0875, 104.0634, 100.7695, 98.20758, 98.08559, 103.1863, 105.6546, 104.7757, 103.3686, 105.148, 105.7958, 101.0629, 102.2113, 103.3861, 104.5883, 105.8188, 102.4775, 104.0917, 102.4809, 104.9203, 112.6073, 109.7455, 110.779, 110.1583, 114.592, 118.6239, 124.965, 129.069, 129.1012, 123.9454, 119.2691, 116.1042, 112.2176, 112.1103, 110.7289, 106.8595, 105.3986, 107.4591, 108.5667, 108.8643, 102.4775, 98.17894, 90.90318, 92.01353, 89.00746, 84.47229, 84.6991, 80.95781, 77.23898, 72.31871, 67.29459, 60.69674, 57.70988, 62.0893, 64.93882, 64.59186, 64.95495, 68.07432, 69.24782, 70.93142, 72.76621, 73.58859, 78.01191, 81.3762, 81.16011, 81.11606, 81.91753, 84.90991, 88.25333, 94.93408, 98.05897, 101.8643, 95.60361, 97.70604, 103.3258, 100.91, 98.55516, 97.87471, 90.05588, 96.70528, 96.23612, 90.47, 89.18919, 89.36874, 86.13219, 89.48657, 89.89703, 85.60055, 78.1929, 82.31541, 82.40451, 80.98148, 82.02709, 85.22832, 79.08424, 79.53149, 79.23279, 81.92002, 83.78013, 89.06149, 93.05719, 92.08907, 93.28355, 95.9245, 100.8529, 103.8903, 102.0247, 101.867, 104.819, 106.6413, 108.083, 101.8812, 100.8126, 101.8509, 105.8686, 107.2247, 103.132, 97.95537, 93.91892, 90.47, 90.64099, 90.90519, 89.27762, 91.66748, 94.46711, 97.24884, 97.39629, 95.22607, 92.74227, 92.14025, 93.58525, 97.61561, 100.6694, 99.38838, 97.79397, 102.9554, 108.1736, 111.7917, 111.9147, 108.1642, 106.2259, 108.8483, 109.9882, 112.2238, 112.9408, 114.7249, 117.6713, 120.4981, 121.6066, 121.9368, 120.6402, 111.0966, 106.7067, 106.1862, 109.9448, 113.2581, 116.4073, 116.8539, 112.953, 113.1703, 114.4862, 112.6288, 113.7367, 114.3954, 116.104, 119.0116, 119.4434, 120.9802, 126.2873, 132.2643, 129.0811, 130.8803, 132.7834, 132.1658, 129.4822, 135.2777, 142.5927, 145.795, 137.5042, 137.3799, 140.6885, 149.3596, 151.173, 160.1281, 159.486, 169.2751, 168.2044, 169.2209, 166.3326, 166.957, 168.2754, 181.2769, 189.5282, 194.9875, 172.532, 125.5349, 129.191, 130.9545, 139.0291, 144.1534, 153.18, 143.9019, 129.2492, 126.3828, 124.6475, 124.4856, 107.2646, 99.39167, 92.67788, 96.80002, 105.6548, 109.2055, 100.22, 91.88045, 90.24525, 94.63676, 93.20554, 80.55206, 70.88995, 73.01373, 60.27247, 61.26762, 62.85861, 65.36401, 51.55583, 46.9867, 42.32187, 46.32534, 72.6794, 83.39546, 75.35459, 78.38197, 79.87387, 83.87478, 74.69204, 75.22058, 84.05593, 109.3504, 129.4518, 141.4221, 135.8304, 136.1647, 124.2743, 128.6972, 132.6884, 140.0198, 150.0754, 142.1286, 144.2498, 129.3245, 130.8027, 124.3942, 119.2932, 116.2011, 116.9081, 119.9329, 120.5005, 120.5005, 116.8569, 109.4394, 118.5154, 128.7849, 134.6847, 141.7383, 151.3206, 154.5147, 155.1151, 166.0008, 162.4689, 167.8679, 173.8831, 174.036, 168.6485, 154.7045, 156.4046, 159.8546, 157.5126, 154.0762, 152.9464, 148.7674, 138.7513, 141.1021, 143.3102, 141.2432, 127.7027, 117.4786, 109.0305, 118.8141, 123.5635, 109.284, 92.19219, 83.01973, 80.66441, 83.48289, 82.18045, 77.4024, 75.54051, 77.57717, 80.79498, 100.48, 104.979, 104.252, 125.3729, 136.6715, 145.7075, 142.594, 140.5404, 139.527, 121.1827, 124.8631, 126.2876, 126.9853, 122.8665, 133.5344, 130.2423, 123.6562, 116.8338, 115.5514, 114.1891, 112.9344, 112.8555, 96.30309, 87.11712, 89.08625, 90.04486, 92.90709, 93.78109, 95.96612, 92.03308, 91.75145, 85.58776, 85.68495, 82.61046, 80.41849, 82.83066, 86.65545, 85.82047, 85.66281, 81.84326, 77.6453, 72.24971, 74.34998, 72.70784, 69.4216, 67.51457, 69.30886, 73.908, 78.23902, 79.42394, 81.98198, 89.4698, 92.42492, 94.48771, 100.1451, 106.1002, 109.8717, 113.5441, 118.0104, 120.0947, 121.8874, 115.2196, 117.0195, 115.3054, 109.3629, 110.2053, 113.139, 111.7677, 114.2836, 111.6997, 113.0678, 117.7678, 120.1992, 117.8222, 115.2872, 118.1236, 117.3001, 119.862, 122.791, 126.2329, 125.4955, 128.6486, 133.5135, 135.9459, 132.4739, 132.2472, 140.5405, 146.3964, 151.1876, 153.7606, 158.2837, 157.1515, 150.9605, 160.6916, 161.036, 160.0026, 154.6804, 150.9446, 128.065, 123.9816, 122.307, 124.7875, 124.8611, 129.1011, 123.2983, 116.5848, 112.4638, 114.3433, 119.931, 116.0661, 111.6319, 112.1565, 108.606, 104.778, 102.9752, 97.52071, 98.51616, 106.0943, 111.2613, 115.8771, 112.241, 108.1186, 106.0785, 106.5239, 98.39125, 95.64565, 95.01329, 89.78307, 89.09266, 87.77892, 85.97609, 80.20226, 84.18716, 86.64806, 87.21847, 86.6924, 85.24478, 84.96128, 85.95378, 86.87869, 86.83684, 88.5326, 90.74116, 91.44895, 81.85661, 83.87809, 84.00732, 84.51979, 81.58447, 78.67561, 83.54423, 85.69564, 83.33037, 83.71346, 83.02929, 80.89339, 83.02929, 87.41793, 90.45756, 92.22007, 91.92593, 97.22382, 100.2265, 98.17147, 98.18868, 97.2154, 96.49962, 98.45915, 101.2861, 101.69, 100.0746, 98.88357, 102.9783, 108.1464, 108.7279, 107.3989, 107.9388, 102.381, 102.677, 98.76602, 100.1681, 100.5805, 95.96181, 98.15725, 99.63088, 100.2765, 102.3499, 104.1251, 105.8436, 110.5679, 115.4954, 116.9556, 121.1235, 122.9733, 125.2834, 126.1887, 129.1117, 132.9736, 134.7854, 138.6936, 137.012, 141.4398, 140.5402, 148.3732, 157.5542, 154.9675, 160.2769, 151.592, 161.1559, 162.0001, 154.812, 153.0445, 160.7483, 160.4797, 153.3946, 150.528, 157.5271, 155.447, 149.0697, 149.8751, 151.1078, 156.2908, 153.1848, 146.8584, 149.0366, 152.4892, 158.3451, 160.9514, 163.2572, 153.39, 146.3299, 136.4381, 132.7437, 131.9367, 135.0242, 135.9918, 139.3164, 141.1403, 146.7886, 151.4737, 155.6371, 161.4591, 165.7241, 171.7977, 176.3478, 178.9884, 185.4092, 181.8861, 185.7994, 188.2, 190.3211, 187.9762, 194.7096, 192.8864, 184.5727, 183.7339, 183.8014, 188.9873, 182.0436, 171.6148, 166.0769, 167.9318, 166.1095, 171.952, 167.6877, 169.6997, 164.5946, 161.3514, 166.5766, 170.5706, 179.6461, 187.3375, 193.5451, 198.7067, 200.7291, 198.0728, 196.8527, 203.2265, 200.9515, 201.1102, 208.1171, 207.9699, 199.5707, 202.229, 201.7687, 194.7021, 179.6401, 158.1365, 161.423, 165.2823, 163.2883, 156.879, 166.3657, 172.2116, 178.3064, 180.102, 178.8624, 185.8376, 188.1208, 186.6155, 183.5694, 188.3601, 193.0313, 191.4868, 188.4424, 190.4951, 194.9258, 195.9014, 198.0435, 199.4814, 200.0079, 197.426, 203.0518, 198.4216, 200.1791, 201.9794, 201.7437, 196.6631, 200.3863, 200.5248, 199.3976, 200.4434, 201.8575, 190.7977, 189.297, 191.6041, 196.7656, 199.6891, 199.8582, 197.4844, 199.441, 196.6592, 187.2189, 191.7982, 180.6298, 178.076, 176.3743, 164.5557, 157.6623, 156.646, 164.8662, 165.9431, 171.7108, 177.013, 180.5623, 183.6719, 186.9633, 184.621, 187.3805, 189.9269, 192.1403, 191.8394, 185.8232, 191.1175, 189.9456, 180.7547, 176.8468, 189.0541, 192.5348, 196.8273, 195.5637, 190.4478, 195.775, 199.7279, 201.9214, 203.1429, 193.9277, 192.3525, 187.5763, 190.739, 196.3213, 185.4791, 176.8143, 175.4523, 175.6943, 177.3843, 178.4767, 168.8377, 167.179, 161.1776, 163.7608, 158.6065, 140.2086, 139.1963, 139.2898, 143.1866, 151.5914, 155.6909, 156.3456, 167.9362, 174.9086, 182.2635, 187.538, 194.1478, 191.715, 188.3697, 187.2107, 184.081, 188.3728, 184.773, 176.5891, 189.1613, 197.0391, 200.6632, 205.4318, 207.53, 205.4318, 206.004, 204.2565, 211.2674, 207.997, 206.8107, 215.5677, 218.4327, 219.6407, 211.4034, 207.6335, 202.6884, 195.9672, 190.5881, 191.4157, 186.8356, 189.1065, 194.4473, 178.6534, 164.2065, 165.5313, 160.0087, 165.8705, 156.4834, 150.8893, 150.2278, 131.566, 125.062, 111.1145, 113.1626, 116.8022, 109.0978, 117.2681, 128.6253, 133.6795, 134.6901, 142.7265, 145.844, 145.986, 135.2845, 133.6429, 140.1765, 142.9368, 141.1452, 153.9906, 159.7917, 160.4409, 160.6945, 158.5938, 158.5442, 160.9974, 158.3534, 160.4657, 152.3518, 148.7732, 151.3847, 148.3736, 142.7454, 140.5964, 136.5829, 134.39, 133.355, 133.152, 128.5353, 125.2242, 120.4669, 119.6728, 117.6438, 112.1269, 109.5418, 108.3577, 112.2459, 117.0491, 116.4731, 115.0533, 122.0917, 121.1999, 116.962, 109.751, 111.0072, 114.1893, 111.5489, 112.7252, 113.9547, 110.3284, 111.5244, 111.4384, 115.3275, 115.4167, 110.1266, 108.3735, 111.7277, 113.9324, 117.4226, 105.7083, 103.1618, 107.0152, 112.9766, 117.2477, 119.9996, 122.0372, 124.9889, 129.6313, 126.9086, 125.6176, 120.4955, 124.2038, 124.5952, 121.3877, 121.241, 117.5116, 117.1773, 106.2497, 106.9951, 109.1534, 109.3446, 103.1369, 100.2235, 96.55191, 100.8942, 100.5342, 94.33001, 93.88827, 93.96203, 104.636, 113.3308, 117.8282, 118.8219, 122.7604, 124.6456, 128.7271, 133.4492, 138.6646, 140.4055, 140.5069, 136.2451, 139.8713, 139.6909, 137.0237, 135.7832, 136.856, 128.8288, 128.3721, 127.7642, 126.1963, 122.6445, 120.6573, 130.8612, 131.7964, 129.8849, 130.191, 127.9267, 132.6847, 139.0797, 137.1463, 137.5846, 140.3736, 142.9162, 145.0154, 141.2456, 137.508, 138.7227, 146.768, 153.6606, 153.5503, 160.9993, 169.6154, 173.2013, 172.992, 177.3384, 172.7274, 175.2464, 169.5566, 168.5747, 173.6915, 175.8171, 186.6113, 197.7055, 205.3762, 201.6785, 200.1097, 207.1543, 211.9728, 223.9458, 215.5036, 188.3824, 163.7768, 160.1886, 165.6257, 169.7563, 173.8437, 170.0422, 164.1391, 171.7422, 169.3206, 164.5673, 165.8953, 170.0958, 164.62, 166.4074, 170.3052, 173.9597, 171.7444, 175.5009, 180.3295, 184.0331, 186.4629, 192.4431, 190.6034, 188.4209, 182.3773, 184.7377, 178.7087, 172.3123, 175.086, 173.156, 177.5262, 180.8391, 179.7849, 164.3703, 155.9962, 150.792, 153.6874, 159.1002, 157.4353, 175.1251, 179.8695, 183.2936, 182.3274, 182.322, 182.6062, 186.3468, 184.6407, 184.8901, 184.8325, 186.4802, 199.0608, 196.7339, 193.6235, 193.6473, 197.1646, 194.056, 196.9063, 197.8974, 197.7852, 195.0108, 199.954, 206.0618, 205.3156, 207.8086, 211.2237, 207.6803, 208.4738, 209.5667, 209.2065, 212.4057, 214.7958, 216.6293, 215.8135, 216.8948, 219.4166, 218.0129, 213.6904, 205.3519, 206.3349, 207.4314, 205.3872, 210.7382, 211.4811, 208.7099, 206.1289, 202.2403, 206.7099, 214.1164, 219.1059, 224.5851, 230.5121, 236.2271, 242.8481, 242.344, 249.5724, 250.0729, 254.1791, 260.9741, 258.9705, 271.7507, 268.7339, 267.699, 272.4257, 274.3265, 261.9154, 267.0722, 269.5771, 278.6736, 290.6867, 292.105, 300.0591, 311.5446, 308.0196, 296.3874, 322.5062, 338.4847, 356.0802, 355.5082, 357.9292, 361.9916, 356.0237, 363.5806, 362.7844, 384.2868, 402.924, 413.5164, 409.5109, 406.9324, 422.8565, 391.2642, 370.0756, 373.9783, 414.107, 430.1704, 449.086, 446.0159, 456.2441, 477.4687, 478.8465, 477.7706, 496.3305, 474.6747, 468.9559, 462.308, 494.4655, 507.6544, 503.7037, 487.9814, 503.9006, 511.2015, 496.7951, 512.6363, 520.2458, 528.4714, 526.1132, 498.9046, 495.2703, 479.0248, 483.6893, 475.8111, 434.8257, 438.8536, 471.3265, 462.314, 449.0504, 438.9099, 388.6443, 400.5309, 420.2823, 425.9558, 424.2897, 409.663, 429.525, 411.3267, 396.7315, 370.4276, 331.7425, 336.7209, 321.8347, 315.0844, 333.5126, 327.6583, 325.4287, 303.1247, 305.6562, 321.6553, 338.6026, 357.7975, 356.3563, 352.252, 359.8369, 360.8455, 359.0459, 363.8914, 376.811, 375.9321, 365.2533, 364.392, 350.836, 356.6279, 344.6965, 336.0862, 341.5896, 339.7968, 353.8152, 361.2346, 351.1166, 351.8294, 345.8805, 333.2172, 333.3792, 336.369, 338.9925, 336.6324, 334.2091, 321.2617, 329.757, 332.6058, 334.1392, 330.7911, 332.4245, 331.4396, 325.2812, 313.0709, 311.9097, 315.635, 320.1865, 327.7404, 330.2874, 333.3743, 332.4788, 334.585, 323.2207, 333.2806, 341.0902, 338.8184, 336.845, 318.9881, 325.0619, 331.1875, 311.8792, 312.3728, 289.1769, 282.2456, 272.5021, 282.2157, 287.5777, 273.569, 256.036, 260.529, 247.0116, 197.6938, 181.1616, 181.0097, 180.9608, 170.6591, 162.7025, 186.0399, 202.1312, 211.9275, 218.9675, 241.7019, 255.9303, 267.1441, 278.154, 290.1484, 295.7975, 288.9007, 307.9068, 319.3744, 299.5085, 287.8403, 285.5126, 286.1124, 293.8613, 305.1417, 310.5512, 319.8513)
library(readxl)
snp_data <- read_excel("data/snp_data.xls")
View(snp_data)
library(readxl)
snp_data <- read_excel("data/snp_data.xls")
View(snp_data)
library(readxl)
snp_data <- read_excel("data/snp_data.xlsx")
View(snp_data)
snp_data <- read_csv("data/snp_data.csv")
snp_data <- read.csv("data/snp_data.csv")
View(snp_data)
snp_data <- read.csv("data/snp.csv")
snp <- read.csv("data/snp.csv")
devtools::use_data(snp, rtadfr)
length(snp)
length(snp_data)
snp
size(snp)
dim(snp)
library(rtadfr)
library("readxl", lib.loc="C:/Users/user/Dropbox/Documents/rtadfr/packrat/lib/x86_64-w64-mingw32/3.5.0")
detach("package:readxl", unload=TRUE)
dentools::document
dentools::document()
library(devtools)
dentools::document()
devtools::document()
?snp
devtools::document()
?snp
?rtadf
?rtadfr
??rtadfr
devtools::document()
devtools::document()
devtools::document()
library(rtadfr)
rtadfSimPar(100, 1000, "sadf")
rtadfSimPar(100, 1000, "sadf")
library(rtadfr)
data(snp)
T <- length(snp)
str(snp)
T <- nrow(snp)
r0 <- round(t*(0.01+1.8/sqrt(t)))
r0 <- round(T*(0.01+1.8/sqrt(T)))
data(snp)
T <- nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
rtadf(snp, r0, test = "sadf", nrep = 500, parallel = TRUE)
snp$ן..snp
snp[,1]
data(snp)
T <- nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
rtadf(snp[,1], r0, test = "sadf", nrep = 500, parallel = TRUE)
#'   computation.
#'
#' @return  List with test statistic, date-stamping sequence, critical values
#'   and date-stamping threshold sequence
#' @export
#'
#' @examples
#' y  <- rnorm(100)
#' r0 <- round(t*(0.01+1.8/sqrt(t))) #minimal window size
#' rtadf(y, r0, test ="sadf")
rtadf <- function(y, r0, test = c("adf", "sadf", "gsadf"),
type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC"),
nrep = 1000, parallel = TRUE) {
if (test == "adf") {
testStat <- ur.adf(y, type, lags, selectlags)
} else if (test == "sadf") {
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.sadf(y, r0, type, lags, selectlags)$sequence)
} else if (test == "gsadf") {
testStat <- ur.gsadf(y, r0, type, lags, selectlags)$stat
testSeq  <- c(rep(NA, r0 - 1),
ur.gsadf(y, r0, type, lags, selectlags)$sequence)
}
t <- length(y)
cvs <- ifelse(parallel, rtadfSimPar(t, r0, nrep, test),
rtadfSim(t, r0, nrep, test))
if (test == "adf") {
list(testStat = testStat, criticalValues = cvs)
} else {
list(testStat = testStat, testSeq = testSeq,
criticalValues = cvs$testCVs,
dateStampSeq =  c(rep(NA, r0 - 1),cvs$datestampCVs[,"95%"]))
}
}
rtadf(snp[,1], r0, test = "sadf", nrep = 500, parallel = TRUE)
library(rtadfr)
data(snp)
T <- nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
rtadf(snp[,1], r0, test = "sadf", nrep = 500, parallel = TRUE)
library(rtadfr)
source('~/.active-rstudio-document')
library(rtadfr)
source('~/.active-rstudio-document')
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 500, parallel = TRUE)
p <- ts(cbind(snp, results$testSeq, results$dateStampSeq))
p <- ts(cbind(snp[,1], results$testSeq, results$dateStampSeq), start = c(1870,1), frequency = 12)
View(p)
y <- snp[,1]
plot(y)
x <- rnorm(100)
snp <- x
T <- nrow(snp)
T <- 100# nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 500, parallel = TRUE)
results <- rtadf(snp, r0, test = "sadf", nrep = 500, parallel = TRUE)
p <- ts(cbind(snp[,1], results$testSeq, results$dateStampSeq), start = c(1870,1), frequency = 12)
p <- ts(cbind(snp, results$testSeq, results$dateStampSeq), start = c(1870,1), frequency = 12)
results <- rtadf(snp, r0, test = "sadf", nrep = 500)
results$testSeq
?rtadf
rtadfSim(100, 10, nrep = 1000, testType = "sadf")
rtadf(x, 10, "sadf")
rtadf(x, 10, "sadf")
testStat <- ur.adf(y, type, lags, selectlags)
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
ur.sadf <- function(y, r0, type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC")) {
adfs <- rep(NA, length(y) - r0)
adfs[1] <- ur.dfr1r2(y,1,r0,type,lags,selectlags)
j <- r0 + 1
for (r2 in j:length(y)) {
adfs[2 + r2 - j] <- ur.dfr1r2(y,1,r2,type,lags,selectlags)
}
maxstat <- max(adfs)
list("stat" = maxstat, "sequence" = adfs)
}
testStat <- ur.sadf(y, r0, type, lags, selectlags)$stat
library(rtadfr)
data(snp)
T <-nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 500)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(simResults)
source('C:/Users/user/Dropbox/Documents/rtadfr/R/rtadf.R')
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 100)
library(rtadfr)
source('~/.active-rstudio-document')
data(snp)
T <-nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 100)
devtools::document()
library(rtadfr)
data(snp)
T <-nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 100)
ur.sadf <- function(y, r0, type = c("none", "drift", "trend"),
lags = 1, selectlags = c("Fixed", "AIC", "BIC")) {
adfs <- rep(NA, length(y) - r0)
adfs[1] <- ur.dfr1r2(y,1,r0,type,lags,selectlags)
j <- r0 + 1
for (r2 in j:length(y)) {
adfs[2 + r2 - j] <- ur.dfr1r2(y,1,r2,type,lags,selectlags)
}
maxstat <- max(adfs)
list("stat" = maxstat, "sequence" = adfs)
}
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 100)
source('C:/Users/user/Dropbox/Documents/rtadfr/R/rtadfHelpFuns.R')
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 100)
p <- ts(cbind(snp[,1], results$testSeq, results$dateStampSeq), start = c(1870,1), frequency = 12)
View(results)
library(rtadfr)
ur.adf()
ur.adf
library(rtadfr)
data(snp)
T <-nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
results <- rtadf(snp[,1], r0, test = "sadf", nrep = 100)
cvs <- rtadfSim(T, r0, testType = "sadf")
cvs <- rtadfSim(T, nrep = 100, r0, testType = "sadf")
temp <- rep(2, Na)
temp <- rep(2, NA)
temp <- matrix(NA, nrow = 9, ncol = 3)
temp
cvs <- rtadfSim(T, nrep = 100, r0, testType = "sadf")
library(rtadfr)
cvs <- rtadfSim(T, nrep = 100, r0, testType = "sadf")
cvs <- rtadfSim(T, nrep = 100, r0, test = "sadf")
M <- matrix(NA, nrow = r0-1, ncol = 3)
N <- rbind(M, datestampCVs)
View(N)
NAmat        <- matrix(NA, nrow = r0-1, ncol = 3)
datestampCVs <- rbind(NAmat, datestampCVs)
Q
library(rtadfr)
library(rtadfr)
data(snp)
T <-nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
testStat <- rtadf(snp[,1], r0, test = "sadf")
cvs <- rtadfSim(T, nrep = 100, r0, test = "sadf")
p <- ts(cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2], start = c(1870,1), frequency = 12)
p <- ts(cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2], start = c(1870,1), frequency = 12))
library(forecast)
install.packages(forecast)
install.packages("forecast")
library(forecast)
autoplot(p)
autoplot(p[,1])
autoplot(p[,2])
autoplot(p[,3])
ts.plot(p)
plot.ts(p)
plot.ts(p, plot.type = "multiple")
1+1
plot.ts(p, plot.type = "single")
plot.ts(p[,2:3], plot.type = "single")
ts.plot(p[,2:3], plot.type = "single", col=c("blue", "red"))
p <- ts(cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2]),
start = c(1870,1), end = (2010, 12)  frequency = 12)
p <- ts(cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2]),
start = c(1870,1), end = (2010, 12)  frequency = 12)
p <- ts(cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2]),
start = c(1870,1), end = (2010, 12), frequency = 12)
cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2])
p <- cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2])
p <- ts(p,start = c(1870,1), end = (2010, 12), frequency = 12)
p <- ts(p,start = c(1870,1), end = c(2010, 12), frequency = 12)
p <- ts(p,start = c(1870,1), frequency = 12)
p <- cbind(snp[,1], testStat$testSeq, cvs$datestampCVs[,2])
p <- ts(p,start = c(1870,1), frequency = 12)
ts.plot(df[,2:3], plot.type = "single", col=c("blue", "red"))
df <- ts(cbind(snp[,1], testStat$testSeq,
cvs$datestampCVs[,2]),start = c(1870,1), frequency = 12)
ts.plot(df[,2:3], plot.type = "single", col=c("blue", "red"))
ts.plot(df[,2:3], plot.type = "single", col=c("blue", "red"))
library(ggplot2)
devtools::document()
library(rtadfr)
ur.df
devtools::load_all(".")
data(snp)
T <-nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
testStat <- rtadf(snp[,1], r0, test = "sadf")
library(rtadfr)
data(snp)
T <-nrow(snp)
r0 <- round(T*(0.01+1.8/sqrt(T)))
testStat <- rtadf(snp[,1], r0, test = "sadf")
library(rtadfr)
testStat <- rtadf(snp[,1], r0, test = "sadf")
cvs <- rtadfSim(T, nrep = 100, r0, test = "sadf")
df <- ts(cbind(testStat$testSeq, cvs$datestampCVs[,2]),
start = c(1870,1), frequency = 12)
cvs$datestampCVs
testStat
devtools::load_all(".")
testStat <- rtadf(snp[1:500,1], r0, test = "sadf")
testStat <- rtadf(snp[,1], r0, test = "sadf")
cvs <- rtadfSimPar(T, nrep = 1000, r0, test = "sadf")
df <- ts(cbind(testStat$testSeq, cvs$datestampCVs[,2]),
start = c(1870,1), frequency = 12)
ts.plot(df[,2:3], plot.type = "single", col=c("blue", "red"))
ts.plot(df, plot.type = "single", col=c("blue", "red"))
testDf <- data.frame("test statistic" = testStat$testStat, "critical values" = cvs$testCVs)
testDf
print(testStat$testStat, cvs$testCVs)
print(testStat$testStat)
testDf <- list("test statistic" = testStat$testStat, "critical values" = cvs$testCVs)
testDf
print(testDf)
library(rtadfr)
devtools::document()
library(rtadfr)
install.packages("pkgdown")
pkgdown::build_site()
library(pkgdown)
pkgdown::build_site()
devtools::install_github("r-lib/pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(rtadfr)
library(pkgdown)
pkgdown::build_site()
vignette("pkgdown")
vignette(pkgdown)
vignette(pkgdwon)
vignette("pkgdown")
?build_site
y <- rnorm(10)
eps <- c(0, diff(y))
eps <- eps - mean(eps)
ur.df
library(rtadfr)
library(pkgdown)
pkgdown::build_site()
template_reference()
person("Itamar", "Caspi", email = "caspi.itamar@gmail.com", role = c("aut", "cre")
)
usethis::use_news_md()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(rtadfr)
pkgdown::build_site()
